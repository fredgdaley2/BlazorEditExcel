@page "/"

<FileSelect @ref="excelFileSelect" Accept=".xlsx" FilesSelected="SpreadsheetSelectedHandler"></FileSelect>

<div class="row">
    <div class="col">
        <div class="text-center">
            <button class="btn btn-outline-primary" @onclick="@SelectFiles"><span class="oi oi-data-transfer-upload"></span>Open Excel File</button>
            <ConditionalDisplay Show="!string.IsNullOrWhiteSpace(ExcelPgeMdl.SelectedFileName)">
                <span class="text-primary">@ExcelPgeMdl.SelectedFileName</span>
            </ConditionalDisplay>
        </div>
    </div>
</div>
<div class="row">


    <ConditionalDisplay Show="ExcelPgeMdl.DataLoaded == DataLoadState.Loaded">
        <div class="col-4">
            <div class="custom-control custom-switch float-left mt-3 mb-2 ">
                <input type="checkbox" class="custom-control-input" id="customSwitch1" checked="@(ExcelPgeMdl.SelectAll)" @onchange="AllSelectionHandler">
                <label class="custom-control-label" for="customSwitch1">@(ExcelPgeMdl.SelectAll ? "De-Select All" : "Select All")</label>
            </div>
        </div>
        <div class="col-4">
            <div class="text-center">
                <button type="button" class="mt-3 mb-2 btn @(!ExcelPgeMdl.AnySelected() ? "btn-danger" : "btn-success")">
                    Rows selected <span class="badge badge-light">@ExcelPgeMdl.Data.Where(d => d.Selected).Count()</span><span> out of </span><span class="badge badge-light">@ExcelPgeMdl.Data.Count</span>
                </button>
            </div>
        </div>
        <div class="col-4">
            <button type="button" id="submitbtn" class="float-right mt-3 mb-2 btn btn-outline-success @(!ExcelPgeMdl.AnySelected() ? "disabled" : "")" disabled="@(!ExcelPgeMdl.AnySelected()? "disabled" : null)">
                <span class="oi oi-bolt"></span>Submit For Processing
            </button>
        </div>
    </ConditionalDisplay>
</div>
<ConditionalDisplay Show="ExcelPgeMdl.DataLoaded == DataLoadState.Loaded">
    <div class="row">
        <div class="col">
            <Table TableItem="UserInfo" Items="@ExcelPgeMdl.Data" @ref="@ExcelPgeMdl.Table" PageSize="@ExcelPgeMdl.GetTablePageSize()" TableRowClass="@(x => x.RowClass)" SelectionType="@(BlazorTable.SelectionType.None)" RowClickAction="RowClick" ShowSearchBar="true">
                <Column TableItem="UserInfo" Title="" Field="@(x => x.Selected)" Sortable="true" Width="5%">
                    <Template>
                        <input type="checkbox" @bind-value="@context.Selected" class="form-control form-control-sm" checked="@(context.Selected)" disabled />
                    </Template>
                </Column>
                <Column TableItem="UserInfo" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="true" Width="5%" DefaultSortColumn="true">
                </Column>
                <Column TableItem="UserInfo" Title="First Name" Field="@(x => x.FirstName)" Sortable="true" Filterable="true" Width="20%">
                </Column>
                <Column TableItem="UserInfo" Title="Last Name" Field="@(x => x.LastName)" Sortable="true" Filterable="true" Width="20%">
                </Column>
                <Column TableItem="UserInfo" Title="Email" Field="@(x => x.EmailAddress)" Sortable="true" Filterable="true" Width="20%">
                    <Template>
                        <a href="mailto:@context.EmailAddress">@context.EmailAddress</a>
                    </Template>
                </Column>
                <Column TableItem="UserInfo" Title="Gender" Field="@(x => x.Gender)" Sortable="true" Filterable="true" Width="10%">
                </Column>
                <Column TableItem="UserInfo" Title="IpAddress" Field="@(x => x.IpAddress)" Sortable="true" Filterable="true" Width="20%">
                </Column>
                <LoadingDataTemplate>
                    <div class="text-center">
                        <h1>Loading Data...</h1>
                    </div>
                </LoadingDataTemplate>
                <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
            </Table>
        </div>
    </div>
</ConditionalDisplay>

<ConditionalDisplay Show="ExcelPgeMdl.DataLoaded == DataLoadState.Loading">
    <div class="modal-overlay"><Wave /></div>
</ConditionalDisplay>
<ConditionalDisplay Show="ExcelPgeMdl.DataLoaded == DataLoadState.Invalid">
    <div class="modal-overlay-danger">
        <div class="text-center">
            <div class="oi oi-ban text-secondary"></div>
            <span class="text-secondary">The spreadsheet is invalid. @ExcelPgeMdl.InvalidMessage</span>
        </div>
    </div>
</ConditionalDisplay>

@code
{
    FileSelect excelFileSelect;

    public EditExcelPageModel<UserInfo> ExcelPgeMdl { get; set; }



    protected override void OnInitialized()
    {
        ExcelPgeMdl = new EditExcelPageModel<UserInfo>(6, CreateNewRow);
    }

    public enum DataLoadState
    {
        UnInitialized,
        Loading,
        Loaded,
        Invalid,
    }

    public class EditExcelPageModel<T> where T : ISelectableRow<T>
    {
        public DataLoadState DataLoaded { get; set; } = DataLoadState.UnInitialized;
        public string SelectedFileName { get; set; } = string.Empty;
        public List<T> SelectedItems { get; set; } = new List<T>();
        public T Selected { get; set; }
        public ITable<T> Table { get; set; }
        public bool SelectAll { get; set; }
        public int NumberOfColumns { get; set; } = -1;

        private Func<ExcelRow,T> CreateNewRowHandler;

        public EditExcelPageModel(int numberOfColumns, Func<ExcelRow, T> createNewRowCallBack)
        {
            this.NumberOfColumns = numberOfColumns;
            this.CreateNewRowHandler = createNewRowCallBack;
        }


        public void CallCreateNewRowHandler(ExcelRow excelRow)
        {
            this.Data.Add(CreateNewRowHandler(excelRow));
        }

        public List<T> Data { get; set; } = null;

        public void InitializeData()
        {
            this.Data = new List<T>();
        }

        public int GetTablePageSize()
        {
            return Table == null ? 15 : Table.PageSize;
        }

        public string InvalidMessage { get; set; } = string.Empty;

        public bool AnySelected()
        {
            return this.Data.Where(d => d.Selected).Count() > 0;
        }

        public void AnyDataLoaded()
        {
            if (this.Data.Count == 0)
            {
                this.DataLoaded = DataLoadState.Invalid;
                this.InvalidMessage = $"The spreadsheet did not contain any data.";
                return;
            }

            this.DataIsLoaded();
        }

        public bool NumberOfColumnsExpected(int numberOfColumnsEncountered)
        {
            if (numberOfColumnsEncountered == this.NumberOfColumns) return true;

            this.DataLoaded = DataLoadState.Invalid;
            this.InvalidMessage = $"Number of columns expected {this.NumberOfColumns} encountered {numberOfColumnsEncountered}.";

            return false;
        }

        public void ExceptionEncountered(int errorRow, Exception ex)
        {
            this.DataLoaded = DataLoadState.Invalid;
            this.InvalidMessage = $"The spreadsheet encounted an error at row {errorRow}. {Environment.NewLine} {ex.Message}";
        }

        public bool HeaderRow(int rowIndex)
        {
            return rowIndex == 0;
        }

        public void DataIsBeingLoaded()
        {
            this.DataLoaded = DataLoadState.Loading;
        }

        public void SelectAllHandler()
        {
            this.SelectAll = !this.SelectAll;
            this.Data.ForEach(x =>
            {
                x.Selected = this.SelectAll;
            });
        }

        private void DataIsLoaded()
        {
            this.DataLoaded = DataLoadState.Loaded;
        }

    }

    public class UserInfo : ISelectableRow<UserInfo>
    {
        public bool Selected { get; set; }
        public int? Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailAddress { get; set; }
        public string Gender { get; set; }
        public string IpAddress { get; set; }

        public string RowClass { get => this.Selected ? "table-info" : null; }

        public void RowClick()
        {
            this.Selected = !this.Selected;
        }

    }

    public UserInfo CreateNewRow(ExcelRow excelRow)
    {
        return new UserInfo
        {
            Id = (int)excelRow.AllocatedCells[0].Value,
            FirstName = (string)excelRow.AllocatedCells[1].Value,
            LastName = (string)excelRow.AllocatedCells[2].Value,
            EmailAddress = (string)excelRow.AllocatedCells[3].Value,
            Gender = (string)excelRow.AllocatedCells[4].Value,
            IpAddress = (string)excelRow.AllocatedCells[5].Value,
        };
    }

    public void RowClick(UserInfo data)
    {
        data.RowClick();
        StateHasChanged();
    }

    public void AllSelectionHandler(ChangeEventArgs eventArgs)
    {

        ExcelPgeMdl.SelectAllHandler();
        StateHasChanged();
    }


    void SelectFiles()
    {

        // Trigger the file selection dialog
        excelFileSelect.SelectFiles();

    }

    async Task SpreadsheetSelectedHandler(SelectedFile[] selectedFiles)
    {
        ExcelPgeMdl.DataIsBeingLoaded();

        SpreadsheetInfo.SetLicense("FREE-LIMITED-KEY");
        // example of opening a selected file...
        var selectedFile = selectedFiles[0];

        ExcelPgeMdl.SelectedFileName = selectedFile.Name;


        ExcelPgeMdl.InitializeData();

        using (var fileStream = await excelFileSelect.OpenFileStreamAsync(selectedFile.Name))
        {
            // read from file stream here...
            var workbook = ExcelFile.Load(fileStream);
            var worksheet = workbook.Worksheets[0];

            foreach (var row in worksheet.Rows)
            {
                try
                {

                    if (!ExcelPgeMdl.NumberOfColumnsExpected(row.AllocatedCells.Count)) return;

                    if (ExcelPgeMdl.HeaderRow(row.Index)) continue;

                    ExcelPgeMdl.CallCreateNewRowHandler(row);

                }
                catch (Exception ex)
                {
                    ExcelPgeMdl.ExceptionEncountered(row.Index, ex);
                    return;

                }
            }
        }

        ExcelPgeMdl.AnyDataLoaded();

    }



}
